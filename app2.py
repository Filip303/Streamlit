# -*- coding: utf-8 -*-
"""App2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17TziimVjDFLYoPuCUDdk3EMA-HbsVVEL
"""

import streamlit as st
import pandas as pd
import yfinance as yf
import numpy as np
import plotly.graph_objects as go
from datetime import datetime, timedelta
from pypfopt import HierarchicalRiskParity
from pypfopt import risk_metrics
import ta

# Configuraci√≥n de la p√°gina
st.set_page_config(page_title="Plataforma de Trading Avanzada", layout="wide")
st.title("üìà Plataforma de Trading Avanzada")

# Sidebar para configuraci√≥n
with st.sidebar:
    st.header("Configuraci√≥n")
    # Input para m√∫ltiples s√≠mbolos
    symbols_input = st.text_input("S√≠mbolos (separados por coma)", value="AAPL,MSFT,GOOGL")
    symbols = [s.strip() for s in symbols_input.split(",")]

    period = st.selectbox(
        "Per√≠odo",
        options=["1mo", "3mo", "6mo", "1y", "2y", "5y"],
        index=3
    )

    interval = st.selectbox(
        "Intervalo",
        options=["1d", "5d", "1wk", "1mo"],
        index=0
    )

@st.cache_data
def get_portfolio_data(tickers, period, interval):
    try:
        portfolio_data = pd.DataFrame()
        info_dict = {}

        for ticker in tickers:
            stock = yf.Ticker(ticker)
            df = stock.history(period=period, interval=interval)
            portfolio_data[f"{ticker}_Close"] = df['Close']
            portfolio_data[f"{ticker}_Volume"] = df['Volume']
            info_dict[ticker] = stock.info

        return portfolio_data, info_dict
    except Exception as e:
        st.error(f"Error al obtener datos: {e}")
        return None, None

def calculate_metrics(portfolio_data, weights):
    # Calcular retornos diarios
    returns = portfolio_data.filter(like='Close').pct_change()
    portfolio_return = returns.dot(weights)

    # Ratio de Sharpe
    risk_free_rate = 0.02  # Tasa libre de riesgo anual
    sharpe = np.sqrt(252) * (portfolio_return.mean() - risk_free_rate/252) / portfolio_return.std()

    # Ratio de Sortino
    downside_returns = portfolio_return[portfolio_return < 0]
    sortino = np.sqrt(252) * (portfolio_return.mean() - risk_free_rate/252) / downside_returns.std()

    # M√°ximo Drawdown y Ratio Calmar
    cum_returns = (1 + portfolio_return).cumprod()
    rolling_max = cum_returns.expanding().max()
    drawdowns = (cum_returns - rolling_max) / rolling_max
    max_drawdown = drawdowns.min()
    calmar = -252 * portfolio_return.mean() / max_drawdown

    return {
        'Sharpe': sharpe,
        'Sortino': sortino,
        'Calmar': calmar,
        'Max Drawdown': max_drawdown
    }

def calculate_technical_indicators(df, symbol):
    # VWAP
    df[f'{symbol}_VWAP'] = ta.volume.volume_weighted_average_price(
        high=df[f'{symbol}_Close'],
        low=df[f'{symbol}_Close'],
        close=df[f'{symbol}_Close'],
        volume=df[f'{symbol}_Volume']
    )

    # EMAs
    df[f'{symbol}_EMA20'] = ta.trend.ema_indicator(df[f'{symbol}_Close'], window=20)
    df[f'{symbol}_EMA50'] = ta.trend.ema_indicator(df[f'{symbol}_Close'], window=50)

    # SMAs
    df[f'{symbol}_SMA20'] = ta.trend.sma_indicator(df[f'{symbol}_Close'], window=20)
    df[f'{symbol}_SMA50'] = ta.trend.sma_indicator(df[f'{symbol}_Close'], window=50)

    return df

# Obtener datos
portfolio_data, info_dict = get_portfolio_data(symbols, period, interval)

if portfolio_data is not None and not portfolio_data.empty:
    # Optimizaci√≥n HRP
    returns = portfolio_data.filter(like='Close').pct_change().dropna()
    hrp = HierarchicalRiskParity()
    hrp.fit(returns)
    weights = hrp.optimize()

    # Crear pesta√±as
    tab1, tab2, tab3 = st.tabs(["An√°lisis de Cartera", "M√©tricas de Rendimiento", "An√°lisis T√©cnico"])

    with tab1:
        st.subheader("Composici√≥n Optimizada de la Cartera")
        weights_df = pd.DataFrame(list(weights.items()), columns=['Activo', 'Peso'])
        weights_df['Peso'] = weights_df['Peso'].round(4) * 100

        # Gr√°fico de composici√≥n
        fig = go.Figure(data=[go.Pie(labels=weights_df['Activo'],
                                   values=weights_df['Peso'],
                                   textinfo='label+percent')])
        st.plotly_chart(fig, use_container_width=True)

        # Mostrar tabla de datos t√©cnicos
        df_display = pd.DataFrame({
            'Precio': technical_data[f'{selected_symbol}_Close'],
            'VWAP': technical_data[f'{selected_symbol}_VWAP'],
            'EMA20': technical_data[f'{selected_symbol}_EMA20'],
            'EMA50': technical_data[f'{selected_symbol}_EMA50'],
            'SMA20': technical_data[f'{selected_symbol}_SMA20'],
            'SMA50': technical_data[f'{selected_symbol}_SMA50']
        }).round(2)

        st.dataframe(df_display)

        # Se√±ales de trading basadas en cruces de medias m√≥viles
        df_display['Se√±al'] = 'Mantener'
        df_display.loc[technical_data[f'{selected_symbol}_EMA20'] > technical_data[f'{selected_symbol}_EMA50'], 'Se√±al'] = 'Comprar'
        df_display.loc[technical_data[f'{selected_symbol}_EMA20'] < technical_data[f'{selected_symbol}_EMA50'], 'Se√±al'] = 'Vender'

        st.subheader("Se√±ales de Trading")
        latest_signal = df_display['Se√±al'].iloc[-1]
        st.info(f"Se√±al actual para {selected_symbol}: {latest_signal}")

        # Panel de operaciones
        st.subheader("Panel de Operaciones")
        col1, col2 = st.columns(2)

        with col1:
            operation = st.radio("Tipo de Operaci√≥n", ["Comprar", "Vender"])
            quantity = st.number_input("Cantidad", min_value=1, value=1)

        with col2:
            price = st.number_input("Precio",
                                  min_value=0.01,
                                  value=float(technical_data[f'{selected_symbol}_Close'].iloc[-1]),
                                  format="%.2f")

            total = price * quantity
            st.write(f"Total de la operaci√≥n: ${total:,.2f}")

        if st.button("Ejecutar Orden"):
            st.success(f"Orden de {operation} ejecutada: {quantity} {selected_symbol} a ${price:.2f}")
            st.write(f"Total: ${total:,.2f}")

if __name__ == "__main__":
    st.sidebar.markdown("---")
    st.sidebar.write("Desarrollado con ‚ù§Ô∏è usando Streamlit")
    st.sidebar.markdown("---")
    st.sidebar.info("Esta es una plataforma de demostraci√≥n. No utilizar para trading real.")

        # Tabla de pesos
        st.dataframe(weights_df)

    with tab2:
        # Calcular y mostrar m√©tricas
        metrics = calculate_metrics(portfolio_data, list(weights.values()))

        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("Ratio Sharpe", f"{metrics['Sharpe']:.2f}")
        with col2:
            st.metric("Ratio Sortino", f"{metrics['Sortino']:.2f}")
        with col3:
            st.metric("Ratio Calmar", f"{metrics['Calmar']:.2f}")
        with col4:
            st.metric("Max Drawdown", f"{metrics['Max Drawdown']:.2%}")

        # Gr√°fico de evoluci√≥n de la cartera
        portfolio_returns = portfolio_data.filter(like='Close').pct_change().dot(list(weights.values()))
        cumulative_returns = (1 + portfolio_returns).cumprod()

        fig = go.Figure()
        fig.add_trace(go.Scatter(x=cumulative_returns.index,
                               y=cumulative_returns,
                               name='Retorno Acumulado'))
        fig.update_layout(title="Evoluci√≥n de la Cartera",
                         xaxis_title="Fecha",
                         yaxis_title="Retorno Acumulado")
        st.plotly_chart(fig, use_container_width=True)

    with tab3:
        # An√°lisis t√©cnico para cada activo
        selected_symbol = st.selectbox("Seleccionar Activo", symbols)

        # Calcular indicadores t√©cnicos
        technical_data = calculate_technical_indicators(portfolio_data.copy(), selected_symbol)

        # Gr√°fico con indicadores
        fig = go.Figure()

        # Precio de cierre
        fig.add_trace(go.Scatter(x=technical_data.index,
                               y=technical_data[f'{selected_symbol}_Close'],
                               name='Precio'))

        # VWAP
        fig.add_trace(go.Scatter(x=technical_data.index,
                               y=technical_data[f'{selected_symbol}_VWAP'],
                               name='VWAP'))

        # EMAs
        fig.add_trace(go.Scatter(x=technical_data.index,
                               y=technical_data[f'{selected_symbol}_EMA20'],
                               name='EMA 20'))
        fig.add_trace(go.Scatter(x=technical_data.index,
                               y=technical_data[f'{selected_symbol}_EMA50'],
                               name='EMA 50'))

        # SMAs
        fig.add_trace(go.Scatter(x=technical_data.index,
                               y=technical_data[f'{selected_symbol}_SMA20'],
                               name='SMA 20'))
        fig.add_trace(go.Scatter(x=technical_data.index,
                               y=technical_data[f'{selected_symbol}_SMA50'],
                               name='SMA 50'))

        fig.update_layout(title=f"An√°lisis T√©cnico - {selected_symbol}",
                         xaxis_title="Fecha",
                         yaxis_title="Precio",
                         height=600)

        st.plotly_chart(fig, use_container_width=True)